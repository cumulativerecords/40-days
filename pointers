Pointers Example

#include <stdio.h>

int main () {

   int  var = 5;   /* actual variable declaration */
   int  *p;        /* pointer variable declaration */

   p = &var;  /* store address of var in pointer variable*/

   printf("Address of var variable: %x\n", &var  );

   /* address stored in pointer variable */
   printf("Address stored in p variable: %x\n", p );

   /* access the value using the pointer */
   printf("Value of *p variable: %d\n", *p );

   return 0;
}


//Null example
//Rationale: Best practice to declare NULL the variables you define but do not know precisely what the address will be yet. Use NULL instead of zero because value of zero (0) is reserved by some operating systems for other purposes, causing issues when trying to run your C code.

#include <stdio.h>

int main () {

   int  *ptr = NULL;

   printf("The value of ptr is : %x\n", ptr  );
 
   return 0;
}

//Check for a NULL pointer
if(ptr)     /* succeeds if p is not null */
if(!ptr)    /* succeeds if p is null */


Further: 

Pointers have many but easy concepts and they are very important to C programming. The following important pointer concepts should be clear to any C programmer âˆ’
S.N. 	Concept & Description

1 	Pointer arithmetic - There are four arithmetic operators that can be used in pointers: ++, --, +, -
2 Array of pointers - You can define arrays to hold a number of pointers.
3 	Pointer to pointer - C allows you to have pointer on a pointer and so on.
4 	Passing pointers to functions in C - Passing an argument by reference or by address enable the passed argument to be changed in the calling function by the called function.
5 	Return pointer from functions in C - C allows a function to return a pointer to the local variable, static variable, and dynamically allocated memory as well.

(Examples adapted from http://www.tutorialspoint.com/cprogramming/c_pointers.htm )



